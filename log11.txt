>>Program State(Id:1):
Execution Stack:
(Ref int v1; (Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))))
Symbol Table:
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
Ref int v1
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
Ref int v1
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
Ref int v2
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
Ref int v2
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
Ref int v3
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
Ref int v3
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
int cnt
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
int cnt
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
new(v1, 2)
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
new(v1, 2)
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:

>>Program State(Id:1):
Execution Stack:
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:

>>Program State(Id:1):
Execution Stack:
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:

>>Program State(Id:1):
Execution Stack:
new(v2, 3)
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:

>>Program State(Id:1):
Execution Stack:
new(v2, 3)
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:

>>Program State(Id:1):
Execution Stack:
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:

>>Program State(Id:1):
Execution Stack:
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:

>>Program State(Id:1):
Execution Stack:
new(v3, 4)
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:

>>Program State(Id:1):
Execution Stack:
new(v3, 4)
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:

>>Program State(Id:1):
Execution Stack:
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:

>>Program State(Id:1):
Execution Stack:
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:

>>Program State(Id:1):
Execution Stack:
newLatch(cnt, readHeap(v2))
(fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:

>>Program State(Id:1):
Execution Stack:
newLatch(cnt, readHeap(v2))
(fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:

>>Program State(Id:1):
Execution Stack:
(fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
(fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))))))
(await(cnt); (print(100); (; print(100))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))))))
(await(cnt); (print(100); (; print(100))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
(await(cnt); (print(100); (; print(100))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
(overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
(await(cnt); (print(100); (; print(100))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
(overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
overwrite(v1, readHeap(v1)*10)
(print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
overwrite(v1, readHeap(v1)*10)
(print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
(print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
(print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
print(readHeap(v1))
(; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
print(readHeap(v1))
(; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
(; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:
(; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:

fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:2):
Execution Stack:

fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->3

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:2):
Execution Stack:
fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:2):
Execution Stack:
fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:2):
Execution Stack:
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
(overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
(overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
overwrite(v2, readHeap(v2)*10)
(print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
overwrite(v2, readHeap(v2)*10)
(print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->3
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
(print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
(print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
print(readHeap(v2))
(; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
print(readHeap(v2))
(; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
(; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:
(; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:

fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:3):
Execution Stack:

fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->2

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:3):
Execution Stack:
fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:3):
Execution Stack:
fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); )))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:3):
Execution Stack:
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
(overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
(overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
overwrite(v3, readHeap(v3)*10)
(print(readHeap(v3)); )
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
overwrite(v3, readHeap(v3)*10)
(print(readHeap(v3)); )
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->4
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
(print(readHeap(v3)); )
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
(print(readHeap(v3)); )
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
print(readHeap(v3))

Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:
print(readHeap(v3))

Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:

Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:4):
Execution Stack:

Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->1

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:4):
Execution Stack:
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
await(cnt)
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
(print(100); (; print(100)))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
print(100)
(; print(100))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
print(100)
(; print(100))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
(; print(100))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
(; print(100))
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:

print(100)
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:

print(100)
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
print(100)
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
1
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
print(100)
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
1
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
Symbol Table:
cnt->1
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
20
2
30
3
40
4
100
1
100
File Table:
Heap:
1->20
2->30
3->40
Latch Table:
1->0

>>Program State(Id:1):
Execution Stack:
(Ref int v1; (Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))))
Symbol Table:
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
Ref int v1
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
Ref int v1
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v2; (Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
Ref int v2
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
Ref int v2
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(Ref int v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
Ref int v3
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
Ref int v3
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
int cnt
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
int cnt
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
new(v1, 2)
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
new(v1, 2)
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(0: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(new(v2, 3); (new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
new(v2, 3)
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
new(v2, 3)
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(0: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(new(v3, 4); (newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100)))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
new(v3, 4)
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
new(v3, 4)
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(0: int)
Output:
File Table:
Heap:
1->2
2->3
Latch Table:
Lock Table:

>>Program State(Id:1):
Execution Stack:
(newLatch(cnt, readHeap(v2)); (fork((overwrite(v1, readHeap(v1)*10); (print(readHeap(v1)); (; fork((overwrite(v2, readHeap(v2)*10); (print(readHeap(v2)); (; fork((overwrite(v3, readHeap(v3)*10); (print(readHeap(v3)); ))))))))))); (await(cnt); (print(100); (; print(100))))))
Symbol Table:
cnt->0
v1->(1: int)
v2->(2: int)
v3->(3: int)
Output:
File Table:
Heap:
1->2
2->3
3->4
Latch Table:
Lock Table:

