>>Program State(Id:1):
Execution Stack:
(int a; (int b; (int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))))))
Symbol Tables:

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
int a
(int b; (int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))))
Symbol Tables:

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
int a
(int b; (int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))))
Symbol Tables:

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(int b; (int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))))
Symbol Tables:
a->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(int b; (int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))))
Symbol Tables:
a->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
int b
(int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))))
Symbol Tables:
a->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
int b
(int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))))
Symbol Tables:
a->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))))
Symbol Tables:
a->0
b->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(int c; (a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))))
Symbol Tables:
a->0
b->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
int c
(a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))
Symbol Tables:
a->0
b->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
int c
(a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))
Symbol Tables:
a->0
b->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))
Symbol Tables:
a->0
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(a=1; (b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))))
Symbol Tables:
a->0
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
a=1
(b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))
Symbol Tables:
a->0
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
a=1
(b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))
Symbol Tables:
a->0
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))
Symbol Tables:
a->1
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(b=2; (c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))))
Symbol Tables:
a->1
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
b=2
(c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))
Symbol Tables:
a->1
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
b=2
(c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))
Symbol Tables:
a->1
b->0
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))
Symbol Tables:
a->1
b->2
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(c=5; (switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300)))
Symbol Tables:
a->1
b->2
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
c=5
(switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))
Symbol Tables:
a->1
b->2
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
c=5
(switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))
Symbol Tables:
a->1
b->2
c->0

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300)); print(300))
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300))
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
switch(a*10) (case b*c: (print(a); print(b))) (case 10: (print(100); print(200))) (default: print(300))
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
if (a*10==b*c) then ((print(a); print(b))) else (if (a*10==10) then ((print(100); print(200))) else (print(300)))
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
if (a*10==b*c) then ((print(a); print(b))) else (if (a*10==10) then ((print(100); print(200))) else (print(300)))
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(print(a); print(b))
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
(print(a); print(b))
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
print(a)
print(b)
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
print(a)
print(b)
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
print(b)
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
1
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
print(b)
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
1
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
1
2
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
print(300)
Symbol Tables:
a->1
b->2
c->5

Output:
1
2
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
>>Program State(Id:1):
Execution Stack:
Symbol Tables:
a->1
b->2
c->5

Output:
1
2
300
File Table:
Heap:
Latch Table:
Lock Table:
Procedure Table:
product->[a, b]=(int v; (v=a*b; print(v)))sum->[a, b]=(int v; (v=a+b; print(v)))
